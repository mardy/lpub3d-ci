#!/bin/bash
#
# Travis build [after_script] procedures
#
#  Trevor SANDY <trevor.sandy@gmail.com>
#  Last Update: August 10, 2018
#  Copyright (c) 2017 - 2018 by Trevor SANDY
#
cd $LP3D_BUILD_FOLDER
# Build checks...

if [[  "$LP3D_COMPILE_SOURCE" = "true" && -z "$LP3D_BUILD_PKG" ]]; then
  if [ "$TRAVIS_OS_NAME" = "osx" ]; then
     SOURCE_DIR=${LP3D_BUILD_FOLDER}/../dmgbuild/lpub3d-ci
  elif [ "$TRAVIS_OS_NAME" = "linux" ]; then
     SOURCE_DIR=${LP3D_BUILD_FOLDER}
  fi
  source ${SOURCE_DIR}/builds/check/build_checks.sh
fi

if [[ ("$LP3D_BUILD_PKG" = "yes" && "$LP3D_BUILD_APPIMAGE" = "true" && "$TRAVIS_OS_NAME" = "linux" ) ]]; then
  echo "- build check LPub3D.AppImage bundle..."
  file_DPkg=$(find $AppImageBuildPath/AppImage -name LPub3D-${LP3D_APP_VERSION_LONG}*.AppImage -type f);
  [ -n "$file_DPkg" ] && mkdir appImage_Check && cd appImage_Check && cp -f $file_DPkg . || \
  echo "ERROR - Nothing copied to build check folder";
  [ -f "LPub3D-${LP3D_APP_VERSION_LONG}-x86_64.AppImage" ] && echo "- checking $(ls ./*.AppImage)..." && \
  chmod u+x LPub3D-${LP3D_APP_VERSION_LONG}-x86_64.AppImage && ./LPub3D-${LP3D_APP_VERSION_LONG}-x86_64.AppImage -foo && \
  echo "- build check completed." && echo || echo "ERROR - Could not run AppImage build check."
fi

cd $LP3D_BUILD_FOLDER

# Gather up and move build artefacts and logs to releases directory
if [[ "$LP3D_BUILD_PKG" = "yes" && -z "$LP3D_COMPILE_SOURCE" && -z "$LP3D_BUILD_STORAGE" && -z "$LP3D_DEPLOY_PACKAGES" ]]; then
  if [ "$TRAVIS_OS_NAME" = "linux" ]; then
    echo "Capturing Docker-generated assets..."
    if [ "$LP3D_BUILD_ARCH" = "true" ]; then
      file_DPkg=$(find $LP3D_COMPOSE_DIR -name LPub3D-${LP3D_APP_VERSION_LONG}*.pkg.tar.xz -type f);
      file_UPkg=$(find $LP3D_COMPOSE_DIR -name LPub3D-UpdateMaster_${LP3D_VERSION}*.pkg.tar.xz -type f);
    fi;
    if [ "$LP3D_BUILD_FEDORA" = "true" ]; then
      file_DPkg=$(find $LP3D_COMPOSE_DIR -name LPub3D-${LP3D_APP_VERSION_LONG}*.rpm -type f);
      file_UPkg=$(find $LP3D_COMPOSE_DIR -name LPub3D-UpdateMaster_${LP3D_VERSION}*.rpm -type f);
    fi;
    if [ "$LP3D_BUILD_XENIAL" = "true" ]; then
      file_DPkg=$(find $LP3D_COMPOSE_DIR -name LPub3D-${LP3D_APP_VERSION_LONG}*.deb -type f);
      file_UPkg=$(find $LP3D_COMPOSE_DIR -name LPub3D-UpdateMaster_${LP3D_VERSION}*.deb -type f);
    fi;
    file_Logs=$(find $LP3D_COMPOSE_DIR -name *.log -type f);
  fi;
  if [ "$LP3D_BUILD_MACOS" = "true" ]; then
    echo "Capturing macOS-generated assets..."
    file_DPkg=$(find $DmgBuildPath/DMGS -name LPub3D-${LP3D_APP_VERSION_LONG}*.dmg -type f);
    file_UPkg=$(find $DmgBuildPath/DMGS -name LPub3D-UpdateMaster_${LP3D_VERSION}*.dmg -type f);
    file_Logs=$(find $DmgBuildPath/lpub3d-ci -name CreateDmg.sh.log -type f);
    [ -n "$file_Logs" ] && cp -f $file_Logs $LP3D_LOGS_DIR || echo "ERROR - Logs folder empty, nothing copied";
    file_Logs=$(find $DmgBuildPath -name CreateRenderers.sh*.log -type f);
  fi;
  if [ "$LP3D_BUILD_APPIMAGE" = "true" ]; then
    echo "Capturing AppImage-generated assets..."
    file_DPkg=$(find $AppImageBuildPath/AppImage -name LPub3D-${LP3D_APP_VERSION_LONG}*.AppImage -type f);
    file_UPkg=$(find $AppImageBuildPath/AppImage -name LPub3D-UpdateMaster_${LP3D_VERSION}*.AppImage -type f);
    file_Logs=$(find ${LP3D_BUILD_FOLDER} -name CreateAppImage.log -type f);
    [ -n "$file_Logs" ] && cp -f $file_Logs $LP3D_LOGS_DIR || echo "ERROR - Logs folder empty, nothing copied";
    file_Logs=$(find ${LP3D_3RD_BUILD_FOLDER} -name CreateRenderers.sh*.log -type f);
  fi;
  [ -n "$file_Logs" ] && cp -f $file_Logs $LP3D_LOGS_DIR || echo "ERROR - Logs folder empty, nothing copied";
  [ -n "$file_UPkg" ] && cp -f $file_UPkg $LP3D_UPDATE_ASSETS || echo "ERROR - Update assets folder empty, nothing copied";
  [ -n "$file_DPkg" ] && cp -f $file_DPkg $LP3D_DOWNLOAD_ASSETS || echo "ERROR - Download assets folder empty, nothing copied";
  echo "Release Files:" && find $LP3D_RELEASES_DIR -type f;

  # Set release or build Dropbox storage path
  if [ "$LP3D_DEPLOY_PKG" = "yes" ]; then
    LP3D_DROPBOX_DIR="$LP3D_DROPBOX_RELEASES_DIR";
  else
    LP3D_DROPBOX_DIR="$LP3D_DROPBOX_BUILDS_DIR";
  fi;
  # Upload assets to Dropbox for temp storage
  if [ -f "/tmp/.dropbox_oauth" ]; then
    chmod +x "${LP3D_CI_DIR}/dropbox_uploader.sh";
    ./"${LP3D_CI_DIR}/dropbox_uploader.sh" mkdir "$LP3D_DROPBOX_DIR";
    ./"${LP3D_CI_DIR}/dropbox_uploader.sh" upload "$LP3D_LOGS_DIR" "$LP3D_DROPBOX_DIR"/;
    ./"${LP3D_CI_DIR}/dropbox_uploader.sh" upload "$LP3D_UPDATE_ASSETS" "$LP3D_DROPBOX_DIR"/;
    ./"${LP3D_CI_DIR}/dropbox_uploader.sh" upload "$LP3D_DOWNLOAD_ASSETS" "$LP3D_DROPBOX_DIR"/;
    ./"${LP3D_CI_DIR}/dropbox_uploader.sh" list "$LP3D_DROPBOX_DIR";
  else
    echo "ERROR - /tmp/.dropbox_oauth token file not found - cannot perform upload";
  fi;
fi
